{"version":3,"sources":["styles/login.module.css","images/womanImg.svg","actions/index.js","pages/Login.js","Components/Header.jsx","Components/Form.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","removedExpense","expense","type","payload","setWallet","wallet","setExpenses","expenses","Login","props","handleSubmit","event","preventDefault","dispatch","history","state","email","password","setEmail","setPassword","push","this","className","style","container","leftLogin","src","womanWallet","alt","rightLogin","cardLogin","formLogin","placeholder","value","onChange","e","setState","target","data-testid","buttonLogin","disabled","length","test","onClick","React","Component","connect","Header","totalExpenses","reduce","acc","curr","exchangeRates","currency","ask","toFixed","user","Form","handleChange","name","data","fetch","response","json","addNewExpense","prevState","id","method","tag","description","currencies","htmlFor","map","curren","key","paymentMethod","tagg","Wallet","handleClick","result","Object","keys","filter","currencie","console","log","tab","index","nameExchange","Number","split","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","walletReducer","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":";gIACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,WAAa,0BAA0B,UAAY,yBAAyB,UAAY,yBAAyB,YAAc,6B,mBCD3ND,EAAOC,QAAU,IAA0B,sC,2/MCMpC,SAASC,EAAeC,GAC7B,MAAO,CACLC,KAJ2B,kBAK3BC,QAASF,GAkBN,SAASG,EAAUC,GACxB,MAAO,CACLH,KA3BsB,aA4BtBC,QAASE,GAIN,SAASC,EAAYC,GAC1B,MAAO,CACLL,KAjCwB,eAkCxBC,QAASI,GAGN,I,kCCjCDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAOVC,aAAe,SAACC,GACdA,EAAMC,iBACN,MAA8B,EAAKH,MAA3BI,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAClB,EAA4B,EAAKC,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SACfJ,EDPK,SAAkBG,GACvB,MAAO,CACLd,KAfqB,YAgBrBC,QAASa,GCIFE,CAASF,IAClBH,EDDK,SAAqBI,GAC1B,MAAO,CACLf,KArBwB,eAsBxBC,QAASc,GCFFE,CAAYF,IACrBH,EAAQM,KAAK,cAZX,EAAKL,MAAQ,CACXC,MAAO,GACPC,SAAU,IAJK,E,0CAiBrB,WAAU,IAAD,OACP,EAA4BI,KAAKN,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAGf,OACE,0BAAMK,UAAYC,IAAMC,WACtB,6BAASF,UAAYC,IAAME,WACzB,yBAAKC,IAAMC,IAAcC,IAAI,YAE/B,6BAASN,UAAYC,IAAMM,YACzB,yBAAKP,UAAYC,IAAMO,WACrB,qCACA,0BAAMR,UAAYC,IAAMQ,WACtB,2BACE7B,KAAK,OACL8B,YAAY,QACZC,MAAQjB,EACRkB,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEpB,MAAOmB,EAAEE,OAAOJ,SAClDK,cAAY,gBAEd,2BACEpC,KAAK,WACL8B,YAAY,WACZC,MAAQhB,EACRiB,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEnB,SAAUkB,EAAEE,OAAOJ,SACrDK,cAAY,oBAGhB,4BACEhB,UAAYC,IAAMgB,YAClBrC,KAAK,SACLsC,WAAavB,EAASwB,QA7Bd,GACJ,eA4B+CC,KAAK1B,IACxD2B,QAAUtB,KAAKX,cAJjB,iB,GA9CUkC,IAAMC,WAqEXC,gBAAUtC,GCxEnBuC,E,4JACJ,WACE,MAA4B1B,KAAKZ,MAAzBO,EAAR,EAAQA,MACFgC,EADN,EAAezC,SACgB0C,QAC7B,SAACC,EAAKC,GAEJ,OADcD,EAAMC,EAAKlB,MAAQkB,EAAKC,cAAcD,EAAKE,UAAUC,MAElE,GAEL,OACE,gCACE,yBAAKhB,cAAY,eAAetB,GAChC,yBAAKsB,cAAY,eAAgBU,EAAcO,QAAQ,IACvD,yBAAKjB,cAAY,yBAAjB,Y,GAbaM,IAAMC,WA6BZC,eAVS,SAAC/B,GAAD,MAAY,CAClCC,MAAOD,EAAMyC,KAAKxC,MAClBT,SAAUQ,EAAMV,OAAOE,YAQVuC,CAAyBC,G,QC5BlCU,E,kDACJ,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IAWNiD,aAAe,SAAC/C,GACd,MAAwBA,EAAM0B,OAAtBsB,EAAR,EAAQA,KAAM1B,EAAd,EAAcA,MACd,EAAKG,SAAL,eACGuB,EAAO1B,KAfK,EAmBjBvB,aAAe,SAACC,GAEd,IHawBiD,EGdxBjD,EAAMC,kBAENC,EADqB,EAAKJ,MAAlBI,WHagB+C,EGZD,EAAK7C,MHYL,uCAAU,WAAOF,GAAP,2FACdgD,MAAM,+CADQ,cAC/BC,EAD+B,gBAEdA,EAASC,OAFK,OAE/BxD,EAF+B,OAG/ByD,EAH+B,2BAGVJ,GAHU,IAGJR,cAAe7C,IAChDM,EAASP,EAAY0D,IAJgB,2CAAV,wDGXvB,EAAK5B,UAAS,SAAC6B,GAAD,MAAgB,CAC5BC,GAAID,EAAUC,GAAK,EACnBjC,MAAO,OAvBX,EAAKlB,MAAQ,CACXmD,GAAI,EACJjC,MAAO,EACPoB,SAAU,MACVc,OAAQ,WACRC,IAAK,oBACLC,YAAa,IARE,E,0CA6BjB,WACE,MAAsDhD,KAAKN,MAAnDkB,EAAR,EAAQA,MAAOoC,EAAf,EAAeA,YAAahB,EAA5B,EAA4BA,SAAUc,EAAtC,EAAsCA,OAAQC,EAA9C,EAA8CA,IACtCE,EAAejD,KAAKZ,MAApB6D,WACR,OACE,6BACE,8BACE,2BAAOC,QAAQ,SAAf,SAEE,2BACEtC,MAAQA,EACRK,cAAY,cACZpC,KAAK,OACLyD,KAAK,QACLO,GAAG,QACHhC,SAAWb,KAAKqC,eAEjB,KAEH,2BAAOa,QAAQ,eAAf,mBAEE,2BACEtC,MAAQoC,EACR/B,cAAY,oBACZpC,KAAK,OACLyD,KAAK,cACLO,GAAG,cACHhC,SAAWb,KAAKqC,eAEjB,KAEH,2BAAOa,QAAQ,cAAf,SAEE,4BACEtC,MAAQoB,EACRM,KAAK,WACLO,GAAG,aACHhC,SAAWb,KAAKqC,cAEfY,EAAWE,KAAI,SAACC,GAAD,OACd,4BAAQC,IAAMD,EAASxC,MAAQwC,GAAWA,QAI/C,IACD,2BAAOF,QAAQ,iBAAf,uBAEE,4BACEtC,MAAQkC,EACRR,KAAK,SACLrB,cAAY,eACZ4B,GAAG,gBACHhC,SAAWb,KAAKqC,cAGd,CAAC,WAAY,0BAAqB,0BAC/Bc,KAAI,SAACG,GAAD,OACH,4BACED,IAAMC,EACN1C,MAAQ0C,GAENA,QAMb,IACD,2BAAOJ,QAAQ,OAAf,OAEE,4BACEtC,MAAQmC,EACRF,GAAG,MACH5B,cAAY,YACZqB,KAAK,MACLzB,SAAWb,KAAKqC,cAGd,CAAC,oBAAe,QAAS,WAAY,aAAc,YAChDc,KAAI,SAACI,GAAD,OACH,4BAAQF,IAAME,EAAO3C,MAAQ2C,GAASA,QAK/C,IACD,4BACEjC,QAAUtB,KAAKX,aACfR,KAAK,UAFP,2B,GAnHO0C,IAAMC,WAmIVC,eAJS,SAAC/B,GAAD,MAAY,CAClCuD,WAAYvD,EAAMV,OAAOiE,cAGZxB,CAAyBW,GCjIlCoB,E,4MAMJC,YAAc,SAAC7E,IAEbY,EADqB,EAAKJ,MAAlBI,UACCb,EAAeC,K,uDAP1B,YAEEY,EADqBQ,KAAKZ,MAAlBI,UJsCe,uCAAM,WAAOA,GAAP,oGAENgD,MAAM,+CAFA,cAEvBC,EAFuB,gBAGRA,EAASC,OAHD,OAGvBgB,EAHuB,OAIvBT,EAAaU,OAAOC,KAAKF,GAAQG,QAAO,SAACC,GAAD,MAA6B,SAAdA,KAC7DtE,EAAST,EAAUkE,IALU,kDAO7Bc,QAAQC,IAAR,MAP6B,0DAAN,yD,oBI7BzB,WAAU,IAAD,OACC9E,EAAac,KAAKZ,MAAlBF,SACR,OACE,6BACE,6CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,6BACE,+BACE,+BACE,4BACG,CACC,kBACA,MACA,yBACA,QACA,QACA,sBACA,mBACA,wBACA,kBACAiE,KAAI,SAACc,EAAKC,GAAN,OACJ,wBAAIb,IAAMa,GAASD,QAIzB,+BACG/E,EAASiE,KAAI,SAACvE,GACb,IAAMuF,EAAevF,EAAQmD,cAAcnD,EAAQoD,UACnD,OACE,wBAAIqB,IAAMzE,EAAQiE,IAChB,4BAAKjE,EAAQoE,aACb,4BAAKpE,EAAQmE,KACb,4BAAKnE,EAAQkE,QACb,4BAAKsB,OAAOxF,EAAQgC,OAAOsB,QAAQ,IACnC,4BAAKiC,EAAa7B,KAAK+B,MAAM,KAAK,IAClC,4BAAKD,OAAOD,EAAalC,KAAKC,QAAQ,IACtC,4BACGkC,OAAOxF,EAAQgC,MAAQuD,EAAalC,KAAKC,QAAQ,IAEpD,oCACA,4BACE,4BAAQrD,KAAK,UAAb,aACA,4BACEyC,QAAU,kBAAM,EAAKmC,YAAY7E,IACjCqC,cAAY,aACZpC,KAAK,UAHP,wB,GAtDD0C,IAAMC,WAkFZC,eATS,SAAC/B,GAAD,MAAY,CAClCR,SAAUQ,EAAMV,OAAOE,YAQVuC,CAAyB+B,GC3EzBc,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYtF,IAClC,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,YAAYC,UAAYjB,MCG5BkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BChBAC,EAAgB,CAAEpF,MAAO,GAAIC,SAAU,IAa9BoF,EAXK,WAAoC,IAAnCtF,EAAkC,uDAA1BqF,EAAeE,EAAW,uCACrD,OAAQA,EAAOpG,MACf,IPNuB,YOOrB,OAAO,2BAAKa,GAAZ,IAAmBC,MAAOsF,EAAOnG,UACnC,IPP0B,eOQxB,OAAO,2BAAKY,GAAZ,IAAmBE,SAAUqF,EAAOnG,UACtC,QACE,OAAOY,I,QCTLqF,EAAgB,CAAE9B,WAAY,GAAI/D,SAAU,IAoBnCgG,EAlBO,WAAoC,IAAnCxF,EAAkC,uDAA1BqF,EAAeE,EAAW,uCACvD,OAAQA,EAAOpG,MACf,IRJwB,aQKtB,OAAO,2BAAKa,GAAZ,IAAmBuD,WAAYgC,EAAOnG,UACxC,IRL0B,eQMxB,OAAO,2BAAKY,GAAZ,IAAmBR,SAAS,GAAD,mBAAMQ,EAAMR,UAAZ,CAAsB+F,EAAOnG,YAC1D,IRN6B,kBQO3B,OAAO,2BACFY,GADL,IAEER,SAAS,YACJQ,EAAMR,SAAS2E,QAAO,SAACjF,GAAD,OAAaA,IAAYqG,EAAOnG,cAG/D,QACE,OAAOY,ICVIyF,EAFKC,0BAAgB,CAAEjD,OAAMnD,WCM7BqG,EAPDC,sBACZC,EACAC,8BACEC,0BAAgBC,OCCpBC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAQA,GAChB,kBAAC,IAAD,CAAeQ,SAAWC,gBACxB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.63877f60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"login_container__2YqWV\",\"leftLogin\":\"login_leftLogin__JV8Sw\",\"rightLogin\":\"login_rightLogin__25Q2f\",\"formLogin\":\"login_formLogin__3f0p_\",\"cardLogin\":\"login_cardLogin__AFS2C\",\"buttonLogin\":\"login_buttonLogin__1UrB0\"};","module.exports = __webpack_public_path__ + \"static/media/womanImg.ab282aff.svg\";","export const SET_EMAIL = 'SET_EMAIL';\nexport const SET_PASSWORD = 'SET_PASSWORD';\nexport const SET_WALLET = 'SET_WALLET';\nexport const SET_EXPENSES = 'SET_EXPENSES';\nexport const REMOVED_EXPENSE = 'REMOVED_EXPENSE';\n\nexport function removedExpense(expense) {\n  return {\n    type: REMOVED_EXPENSE,\n    payload: expense,\n  };\n}\n\nexport function setEmail(email) {\n  return {\n    type: SET_EMAIL,\n    payload: email,\n  };\n}\n\nexport function setPassword(password) {\n  return {\n    type: SET_PASSWORD,\n    payload: password,\n  };\n}\n\nexport function setWallet(wallet) {\n  return {\n    type: SET_WALLET,\n    payload: wallet,\n  };\n}\n\nexport function setExpenses(expenses) {\n  return {\n    type: SET_EXPENSES,\n    payload: expenses,\n  };\n}\nexport const fetchExpenses = (data) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const expenses = await response.json();\n  const addNewExpense = { ...data, exchangeRates: expenses };\n  dispatch(setExpenses(addNewExpense));\n};\n\nexport const fetchWallet = () => async (dispatch) => {\n  try {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const result = await response.json();\n    const currencies = Object.keys(result).filter((currencie) => currencie !== 'USDT');\n    dispatch(setWallet(currencies));\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { setEmail, setPassword } from '../actions/index';\nimport style from '../styles/login.module.css';\nimport womanWallet from '../images/womanImg.svg';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n    };\n  }\n\nhandleSubmit = (event) => {\n  event.preventDefault();\n  const { dispatch, history } = this.props;\n  const { email, password } = this.state;\n  dispatch(setEmail(email));\n  dispatch(setPassword(password));\n  history.push('/carteira');\n}\n\nrender() {\n  const { email, password } = this.state;\n  const minLength = 6;\n  const regex = /\\S+@\\S+\\.\\S+/;\n  return (\n    <main className={ style.container }>\n      <section className={ style.leftLogin }>\n        <img src={ womanWallet } alt=\"wallet\" />\n      </section>\n      <section className={ style.rightLogin }>\n        <div className={ style.cardLogin }>\n          <h1>Login</h1>\n          <form className={ style.formLogin }>\n            <input\n              type=\"text\"\n              placeholder=\"email\"\n              value={ email }\n              onChange={ (e) => this.setState({ email: e.target.value }) }\n              data-testid=\"email-input\"\n            />\n            <input\n              type=\"password\"\n              placeholder=\"password\"\n              value={ password }\n              onChange={ (e) => this.setState({ password: e.target.value }) }\n              data-testid=\"password-input\"\n            />\n          </form>\n          <button\n            className={ style.buttonLogin }\n            type=\"submit\"\n            disabled={ !(password.length >= minLength && regex.test(email)) }\n            onClick={ this.handleSubmit }\n          >\n            Entrar\n\n          </button>\n        </div>\n      </section>\n    </main>\n  );\n  // https://www.horadecodar.com.br/2020/09/13/como-validar-email-com-javascript/\n  // func de verificacao linha 15\n}\n}\n\nLogin.propTypes = {\n  dispatch: propTypes.func.isRequired,\n  history: propTypes.shape({ push: propTypes.func }).isRequired,\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    const totalExpenses = expenses.reduce(\n      (acc, curr) => {\n        const total = acc + curr.value * curr.exchangeRates[curr.currency].ask;\n        return total;\n      }, 0,\n    );\n    return (\n      <header>\n        <div data-testid=\"email-field\">{email}</div>\n        <div data-testid=\"total-field\">{ totalExpenses.toFixed(2) }</div>\n        <div data-testid=\"header-currency-field\">BRL</div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchExpenses } from '../actions';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: 0,\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      description: '',\n    };\n  }\n\n    handleChange = (event) => {\n      const { name, value } = event.target;\n      this.setState({\n        [name]: value,\n      });\n    };\n\n    handleSubmit = (event) => {\n      event.preventDefault();\n      const { dispatch } = this.props;\n      dispatch(fetchExpenses(this.state));\n      this.setState((prevState) => ({\n        id: prevState.id + 1,\n        value: 0,\n      }));\n    }\n\n    render() {\n      const { value, description, currency, method, tag } = this.state;\n      const { currencies } = this.props;\n      return (\n        <div>\n          <form>\n            <label htmlFor=\"value\">\n              Valor:\n              <input\n                value={ value }\n                data-testid=\"value-input\"\n                type=\"text\"\n                name=\"value\"\n                id=\"value\"\n                onChange={ this.handleChange }\n              />\n              {' '}\n            </label>\n            <label htmlFor=\"description\">\n              Descrição:\n              <input\n                value={ description }\n                data-testid=\"description-input\"\n                type=\"text\"\n                name=\"description\"\n                id=\"description\"\n                onChange={ this.handleChange }\n              />\n              {' '}\n            </label>\n            <label htmlFor=\"currencies\">\n              Moeda:\n              <select\n                value={ currency }\n                name=\"currency\"\n                id=\"currencies\"\n                onChange={ this.handleChange }\n              >\n                {currencies.map((curren) => (\n                  <option key={ curren } value={ curren }>{ curren }</option>\n                ))}\n              </select>\n            </label>\n            {' '}\n            <label htmlFor=\"paymentMethod\">\n              Metodo de pagamento:\n              <select\n                value={ method }\n                name=\"method\"\n                data-testid=\"method-input\"\n                id=\"paymentMethod\"\n                onChange={ this.handleChange }\n              >\n                {\n                  ['Dinheiro', 'Cartão de crédito', 'Cartão de débito']\n                    .map((paymentMethod) => (\n                      <option\n                        key={ paymentMethod }\n                        value={ paymentMethod }\n                      >\n                        { paymentMethod }\n                      </option>\n                    ))\n                }\n              </select>\n            </label>\n            {' '}\n            <label htmlFor=\"tag\">\n              Tag:\n              <select\n                value={ tag }\n                id=\"tag\"\n                data-testid=\"tag-input\"\n                name=\"tag\"\n                onChange={ this.handleChange }\n              >\n                {\n                  ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde']\n                    .map((tagg) => (\n                      <option key={ tagg } value={ tagg }>{ tagg }</option>\n                    ))\n                }\n              </select>\n            </label>\n            {' '}\n            <button\n              onClick={ this.handleSubmit }\n              type=\"submit\"\n            >\n              Adicionar despesa\n            </button>\n          </form>\n        </div>\n      );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nexport default connect(mapStateToProps)(Form);\n\nForm.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../Components/Header';\nimport { fetchWallet, removedExpense } from '../actions/index';\nimport Form from '../Components/Form';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchWallet());\n  }\n\n  handleClick = (expense) => {\n    const { dispatch } = this.props;\n    dispatch(removedExpense(expense));\n  };\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <div>TrybeWallet!</div>\n        <Header />\n        <Form />\n        <div>\n          <table>\n            <thead>\n              <tr>\n                {[\n                  'Descrição',\n                  'Tag',\n                  'Método de pagamento',\n                  'Valor',\n                  'Moeda',\n                  'Câmbio utilizado',\n                  'Valor convertido',\n                  'Moeda de conversão',\n                  'Editar/Excluir',\n                ].map((tab, index) => (\n                  <th key={ index }>{tab}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {expenses.map((expense) => {\n                const nameExchange = expense.exchangeRates[expense.currency];\n                return (\n                  <tr key={ expense.id }>\n                    <td>{expense.description}</td>\n                    <td>{expense.tag}</td>\n                    <td>{expense.method}</td>\n                    <td>{Number(expense.value).toFixed(2)}</td>\n                    <td>{nameExchange.name.split('/')[0]}</td>\n                    <td>{Number(nameExchange.ask).toFixed(2)}</td>\n                    <td>\n                      {Number(expense.value * nameExchange.ask).toFixed(2)}\n                    </td>\n                    <td>Real</td>\n                    <td>\n                      <button type=\"button\">Adicionar</button>\n                      <button\n                        onClick={ () => this.handleClick(expense) }\n                        data-testid=\"delete-btn\"\n                        type=\"button\"\n                      >\n                        Excluir\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  dispatch: propTypes.func.isRequired,\n  expenses: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_EMAIL, SET_PASSWORD } from '../actions/index';\n\nconst INITIAL_STATE = { email: '', password: '' };\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_EMAIL:\n    return { ...state, email: action.payload };\n  case SET_PASSWORD:\n    return { ...state, password: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","import { SET_WALLET, SET_EXPENSES, REMOVED_EXPENSE } from '../actions/index';\n\nconst INITIAL_STATE = { currencies: [], expenses: [] };\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_WALLET:\n    return { ...state, currencies: action.payload };\n  case SET_EXPENSES:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case REMOVED_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses.filter((expense) => expense !== action.payload),\n      ],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}